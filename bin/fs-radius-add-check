#!/usr/bin/perl -Tw

# quick'n'dirty hack of fs-setup to add radius attributes
# (i'm not sure this even works in the new world of schema changes - everyone
#  uses attributes via groups now)

use strict;
use DBI;
use FS::UID qw(adminsuidsetup);
use FS::raddb;

my %attrib2db =
  map { lc($FS::raddb::attrib{$_}) => $_ } keys %FS::raddb::attrib;

my $user = shift or die &usage;
my $dbh = adminsuidsetup $user;

###

print "\n\n", <<END, ":";
Enter the additional RADIUS check attributes you need to track for
each user, separated by whitespace.
END
my @attributes = map { $attrib2db{lc($_)} or die "unknown attribute $_"; }
                   split(" ",&getvalue);

sub getvalue {
  my($x)=scalar(<STDIN>);
  chop $x;
  $x;
}

###

my($char_d) = 80; #default maxlength for text fields

###

foreach my $attribute ( @attributes ) {

  my $statement =
    "ALTER TABLE svc_acct ADD COLUMN rc_$attribute varchar($char_d) NULL";
  my $sth = $dbh->prepare( $statement )
   or warn "Error preparing $statement: ". $dbh->errstr;
  my $rc = $sth->execute
    or warn "Error executing $statement: ". $sth->errstr;

  $statement =
    "ALTER TABLE h_svc_acct ADD COLUMN rc_$attribute varchar($char_d) NULL";
  $sth = $dbh->prepare( $statement )
   or warn "Error preparing $statement: ". $dbh->errstr;
  $rc = $sth->execute
    or warn "Error executing $statement: ". $sth->errstr;

}

$dbh->commit or die $dbh->errstr;

$dbh->disconnect or die $dbh->errstr;

print "\n\n", "Now you must run dbdef-create.\n\n";

sub usage {
  die "Usage:\n  fs-radius-add-check user\n"; 
}

