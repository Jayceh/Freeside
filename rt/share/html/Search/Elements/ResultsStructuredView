%# BEGIN BPS TAGGED BLOCK {{{
%# 
%# COPYRIGHT:
%# 
%# This software is Copyright (c) 1996-2009 Best Practical Solutions, LLC
%#                                          <jesse@bestpractical.com>
%# 
%# (Except where explicitly superseded by other copyright notices)
%# 
%# 
%# LICENSE:
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%# 
%# 
%# CONTRIBUTION SUBMISSION POLICY:
%# 
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%# 
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%# 
%# END BPS TAGGED BLOCK }}}
<%ARGS>
$Query => undef
$OrderBy => 'id'
$Order => 'ASC'
$Format => undef

#Callbacks
$WriteHeader => sub { $RT::Logger->error('WriteHeader callback required'); '' }
$WriteRow    => sub { $RT::Logger->error('WriteRow callback required'); '' }
$FormatDate  => sub { $_[0]->AsString }
</%ARGS>
<%INIT>

use HTML::TreeBuilder;
use HTML::FormatText;

my $Tickets = RT::Tickets->new( $session{'CurrentUser'} );
$Tickets->FromSQL( $Query );
if ( $OrderBy =~ /\|/ ) {
    # Multiple Sorts
    my @OrderBy = split /\|/, $OrderBy;
    my @Order   = split /\|/, $Order;
    $Tickets->OrderByCols(
        map { { FIELD => $OrderBy[$_], ORDER => $Order[$_] } }
        ( 0 .. $#OrderBy )
    );
}
else {
    $Tickets->OrderBy( FIELD => $OrderBy, ORDER => $Order );
}

# Convert the format string to column info
$Format = $m->comp('/Elements/ScrubHTML', Content => $Format);
my @Format = $m->comp('/Elements/CollectionAsTable/ParseFormat', 
                      Format => $Format);

# Generate the header row
my $item = 0;
my @header;
foreach my $column (@Format) {
# see /Element/CollectionAsTable/Header
    my $title = $column->{'title'} || '';
    if ( $title eq 'NEWLINE' ) {
        # ignore these for now
        undef $column;
        next;
    }
    $title = '' if $title eq 'NBSP';

    if ( !defined $column->{'title'} ) {
        my $attr = $column->{'attribute'} || $column->{'last_attribute'};
        my $tmp = $m->comp( '/Elements/ColumnMap',
                Class => 'RT__Ticket',
                Name  => $attr,
                Attr  => 'title'
                );
        $title = ProcessColumnMapValue($tmp, Arguments => [ $attr ]);
    }

    push @header, $title;

} #foreach $column

&{ $WriteHeader }(@header);

my $plaintext = HTML::FormatText->new;
my $row = 1;
my $ColumnMap = {};
while ( my $Ticket = $Tickets->Next()) {
    my $height = 0;
    my @row = ();
    foreach my $column ( @Format ) {
        next if !defined $column;

        my $value = '';
        my @out;
        # Ignore almost all formatting here.
        foreach my $subcol ( @{ $column->{output} } ) {
            my ($col) = ($subcol =~ /^__(.*?)__$/ );

            if ( !$col ) {
                push @out, $subcol;
                next;
            }

            if ( !exists $ColumnMap->{$col}{'value'} ) {
                my $map = {};
                foreach ('attribute', 'value') {
                    $map->{$_} = $m->comp(
                        '/Elements/ColumnMap',
                        Class => 'RT__Ticket',
                        Name  => $col,
                        Attr  => $_,
                    );
                }
                $ColumnMap->{$col} = $map;
            }

            push @out, ProcessColumnMapValue(
                $ColumnMap->{$col}{'value'},
                Arguments => [ $Ticket, $row ],
                FormatDate => $FormatDate,
            );
        } #foreach $subcol
        $value = join('', '<span>', @out, '</span>');
        # strip out all HTML except line breaks
        my $tree = HTML::TreeBuilder->new->parse($value);
        my $text = $plaintext->format($tree);
        # along with leading/trailing whitespace
        my @lines = map { s/^\s*//; s/\s*$//; $_ } split("\n", $text);

        # then provide separate lines to the callback
        push @row, \@lines;
    } #foreach $column

    &{ $WriteRow }(@row);

} # while $Tickets->Next

</%INIT>
